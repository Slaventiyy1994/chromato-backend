// domain/methodCalculator.ts

import {
  MethodData,
  Injection,
  Solution,
  OptionalSolution,
  GradientData
} from './types';
  
  export class MethodCalculator {
    /**
     * –°—Ç–≤–æ—Ä—é—î –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±‚Äô—î–∫—Ç –º–µ—Ç–æ–¥–∏–∫–∏
     */
    createEmptyMethod(): MethodData {
      return {
        flowRateMlMin: undefined,
        methodDurationMin: undefined,
        sparePercent: undefined,
        totalInjections: undefined,
        gradientData: undefined,
        solutionsList: [],
        injectionsList: [],
        optionalSolutionsList: [],
        mobilePhaseVolumeMl: undefined,
        mobilePhaseComposition: {},
        solventsTotals: {},
        reagentsTotals: {},
        logMessages: [],
        auditTrail: [],
      };
    }
  
    /**
     * –°–ø—Ä–æ—â–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç—É –º–µ—Ç–æ–¥–∏–∫–∏
     */
    parseMethod(rawText: string): MethodData {
      const data = this.createEmptyMethod();
  
      data.flowRateMlMin = this.parseFlowRate(rawText);
      data.methodDurationMin = this.parseMethodDuration(rawText);
      data.sparePercent = this.parseSparePercent(rawText);
  
      data.solutionsList = this.parseSolutions(rawText);
      data.injectionsList = this.parseInjections(rawText);
      data.optionalSolutionsList = this.parseOptionalSolutions(rawText);
  
      data.logMessages.push('–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
      data.auditTrail.push('parseMethod –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
      return data;
    }
  
    private parseFlowRate(text: string): number | undefined {
      const match = text.match(/flow\s*rate\s*[:=]?\s*(\d+(\.\d+)?)\s*ml\/min/i);
      return match ? parseFloat(match[1]) : undefined;
    }
  
    private parseMethodDuration(text: string): number | undefined {
      const match = text.match(/(run\s*time|duration)\s*[:=]?\s*(\d+(\.\d+)?)\s*min/i);
      return match ? parseFloat(match[2]) : undefined;
    }
  
    private parseSparePercent(text: string): number | undefined {
      const match = text.match(/(extra|spare|reserve)\s*(\d+)%/i);
      return match ? parseFloat(match[2]) / 100 : undefined;
    }
  
    private parseSolutions(text: string): Solution[] {
      // –ó–∞–≥–ª—É—à–∫–∞: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Å–ø–∏—Å–æ–∫
      return [
        { name: 'Solution A', isInjected: true },
        { name: 'Solution B', isInjected: false },
      ];
    }
  
    private parseInjections(text: string): Injection[] {
      return [
        { solutionName: 'Solution A', injectionCount: 2 },
      ];
    }
  
    private parseOptionalSolutions(text: string): OptionalSolution[] {
      return [
        { name: '0.1 M KOH', maxVolumeMl: 100, usedVolumeMl: 0 },
      ];
    }
  
    /**
     * –û—Å–Ω–æ–≤–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏: –º–æ–±—ñ–ª—å–Ω–∞ —Ñ–∞–∑–∞, –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è, —ñ–Ω‚Äô—î–∫—Ü—ñ—ó
     */
    coreCalculations(data: MethodData): void {
      const totalInj = data.totalInjections ?? 1;
      const tMethod = data.methodDurationMin ?? 0;
      const flow = data.flowRateMlMin ?? 0;
      const spare = data.sparePercent ?? 0;
  
      const volumeNoSpare = flow * tMethod * totalInj;
      const volumeWithSpare = volumeNoSpare * (1 + spare);
  
      data.mobilePhaseVolumeMl = volumeWithSpare;
  
      // –°–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª ‚Äî 50/50 –≤–æ–¥–∞/–∞—Ü–µ—Ç–æ–Ω—ñ—Ç—Ä–∏–ª
      data.mobilePhaseComposition = {
        Water: volumeWithSpare * 0.5,
        Acetonitrile: volumeWithSpare * 0.5,
      };
  
      data.logMessages.push(`–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –º–æ–±. —Ñ–∞–∑—É: ${volumeWithSpare.toFixed(1)} –º–ª`);
      data.auditTrail.push('coreCalculations –≤–∏–∫–æ–Ω–∞–Ω–æ');
    }
  
    /**
     * –§–æ—Ä–º—É—î –∑–≤—ñ—Ç –∑–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∞–º–∏
     */
    generateFinalReport(data: MethodData): string {
      let report = '=== –•—Ä–æ–º–∞—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –∑–≤—ñ—Ç ===\n';
  
      report += `üîπ –®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—Ç–æ–∫—É: ${data.flowRateMlMin} –º–ª/—Ö–≤\n`;
      report += `üîπ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –º–µ—Ç–æ–¥—É: ${data.methodDurationMin} —Ö–≤\n`;
      report += `üîπ –ó–∞–ø–∞—Å: ${(data.sparePercent ?? 0) * 100}%\n`;
      report += `üîπ –Ü–Ω‚Äô—î–∫—Ü—ñ–π: ${data.totalInjections}\n\n`;
  
      report += `üîπ –û–±‚Äô—î–º –º–æ–±—ñ–ª—å–Ω–æ—ó —Ñ–∞–∑–∏: ${data.mobilePhaseVolumeMl?.toFixed(2)} –º–ª\n`;
      report += `üîπ –°–∫–ª–∞–¥:\n`;
      for (const [key, val] of Object.entries(data.mobilePhaseComposition ?? {})) {
        report += `   - ${key}: ${val.toFixed(2)} –º–ª\n`;
      }
  
      report += '\nüîπ –†–æ–∑—á–∏–Ω–∏:\n';
      data.solutionsList.forEach((s) => {
        report += `   - ${s.name}, –≤–≤–æ–¥–∏—Ç—å—Å—è: ${s.isInjected ? '—Ç–∞–∫' : '–Ω—ñ'}\n`;
      });
  
      report += '\nüîπ –û–ø—Ü—ñ–π–Ω—ñ —Ä–æ–∑—á–∏–Ω–∏:\n';
      data.optionalSolutionsList.forEach((opt) => {
        report += `   - ${opt.name}: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ ${opt.usedVolumeMl ?? 0} –º–ª\n`;
      });
  
      report += '\n=== –ö—ñ–Ω–µ—Ü—å –∑–≤—ñ—Ç—É ===\n';
      return report;
    }
  }